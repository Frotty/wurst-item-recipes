package ItemRecipe
import LinkedList
import HashMap
import AttachmentPoints
import Abilities
import BonusHandler

public constant recipeMap = new HashMap<int, LinkedList<ItemRecipe>>

public class ItemRecipe
    let itemList = new LinkedList<int>
    var resultItemId = 0
    var name = ""
    var tooltip = ""

    var goldCost = 0
    var lumberCost = 0

    function gold(int gold)
        goldCost = gold

    function lumber(int lumber)
        lumberCost = lumber

    function setRequiredItems(vararg int ids)
        tooltip = COLOR_GOLD.toColorString() + "Required|r Items:\n"
        for id in ids
            itemList.add(id)

            let dummy = createItem(id, ZERO2)
            tooltip += "-" + dummy.getName() + "\n"
            dummy.remove()

            if not recipeMap.has(id)
                recipeMap.put(id, new LinkedList<ItemRecipe>)
            recipeMap.get(id).add(this)


    function setResultItem(int id)
        setResultItem(id, null)

    function setResultItem(int id, LinkedList<Bonus> bonuses)
        resultItemId = id

        let dummy = createItem(id, ZERO2)
        name = "Purchase " + dummy.getName()
        dummy.remove()

        for bonus in bonuses
            tooltip += "\n" + bonus.toString()


    function checkUnit(unit u, int fullId) returns boolean
        let requirements = itemList.copy()
        for i = 0 to 5
            requirements.remove(u.itemInSlot(i).getTypeId())

        requirements.remove(fullId)

        if not requirements.isEmpty()
            destroy requirements
            return false

        for itemId in itemList
            u.getItemById(itemId)
            ..setUserData(-1)
            ..remove()

        u.addItemById(resultItemId)
        u.addEffect(Abilities.tomeOfRetrainingCaster, AttachmentPoints.origin)..destr()
        destroy requirements
        return true




