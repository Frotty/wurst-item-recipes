package ItemRecipe
import LinkedList
import HashMap
import AttachmentPoints
import Abilities

public constant recipeMap = new HashMap<int, LinkedList<ItemRecipe>>

public class ItemRecipe
    let itemList = new LinkedList<int>  
    var resultItemId = 0

    function setRequiredItems(vararg int ids)
        for id in ids
            itemList.add(id)

            if not recipeMap.has(id)
                recipeMap.put(id, new LinkedList<ItemRecipe>)
            recipeMap.get(id).add(this)
            
    function setResultItem(int id)
        resultItemId = id

    function checkUnit(unit u, int fullId) returns boolean
        let requirements = itemList.copy()
        for i = 0 to 5
            requirements.remove(u.itemInSlot(i).getTypeId())

        requirements.remove(fullId)
            
        if not requirements.isEmpty()
            destroy requirements
            return false

        for itemId in itemList
            u.getItemById(itemId)
            ..setUserData(-1)
            ..remove()

        u.addItemById(resultItemId)
        u.addEffect(Abilities.tomeOfRetrainingCaster, AttachmentPoints.origin)..destr()
        destroy requirements
        return true

    


