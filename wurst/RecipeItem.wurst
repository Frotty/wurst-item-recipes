package RecipeItem
import ItemObjEditing
import ObjectIdGenerator
import ClosureEvents
import HashMap
import ClosureTimers
import Objects
import LinkedList
import GameTimer
import public BonusHandler
import Abilities
import AttachmentPoints

constant tomeMap = new HashMap<int, RecipeItem>
constant realMap = new HashMap<int, RecipeItem>
constant timestamps = new HashMap<item, real>

public interface ItemEventListener
    function emit(unit actor)

public function item.getRecipeItem() returns RecipeItem
    let itemId = this.getTypeId()
    if realMap.has(itemId)
        return realMap.get(itemId)
    else if tomeMap.has(itemId)
        return tomeMap.get(itemId)
    return null


public class ItemBonus
    Bonus bonus
    real amount

    construct(Bonus bonus, real amount)
        this.bonus = bonus
        this.amount = amount

    function apply(unit u)
        u.addBonus(bonus, amount)

    function remove(unit u)
        u.addBonus(bonus, -amount)
    
    function toString() returns string
        var result = ""
        if amount >= 0
            result += COLOR_GOLD.toColorString() + "+"
        else
            result += color(205,55,55).toColorString()
        if bonus == Bonus.MANAREGEN
            result += amount.toString()
        else
            result += amount.round().toString()
        result += bonus.getMeasure() + "|r " + bonus.toString()
        return result
        
public constant recipeMap = new HashMap<int, LinkedList<ItemRecipe>>

public class ItemRecipe
    let itemList = new LinkedList<int>
    var resultItemId = 0
    var name = ""
    var tooltip = ""
    var goldCost = 0
    var totalGoldCost = 0

    function gold(int gold)
        goldCost = gold

    function setRequiredItems(vararg RecipeItem ingredients)
        tooltip = COLOR_GOLD.toColorString() + "Required Items|r:\n"
        for ingredient in ingredients
            let id = ingredient.getNewId()
            itemList.add(id)

            totalGoldCost += ingredient.goldWorth
            let dummy = createItem(id, ZERO2)
            tooltip += "  - " + dummy.getName() + "\n"
            dummy.remove()

            if not recipeMap.has(id)
                recipeMap.put(id, new LinkedList<ItemRecipe>)
            recipeMap.get(id).add(this)

    function setResultItem(RecipeItem recipeItem)
        resultItemId = recipeItem.getNewId()
        name = "Purchase " + recipeItem.name
        tooltip += "\n" + recipeItem.tooltipExtended
        totalGoldCost += goldCost
        recipeItem.goldWorth = totalGoldCost

    function checkUnit(unit u, int fullId) returns boolean
        let requirements = itemList.copy()
        for i = 0 to 5
            requirements.remove(u.itemInSlot(i).getTypeId())

        requirements.remove(fullId)

        if not requirements.isEmpty()
            destroy requirements
            return false

        for itemId in itemList
            u.getItemById(itemId)
            ..setUserData(-1)
            ..remove()

        u.addItemById(resultItemId)
        u.addEffect(Abilities.tomeOfRetrainingCaster, AttachmentPoints.origin)..destr()
        destroy requirements
        return true


public class RecipeItem extends ItemDefinition
    let tomeId = ITEM_ID_GEN.next()
    let tomeDef = new ItemDefinition(tomeId, 'manh')
        ..setAbilities("")
        ..setModelUsed(Objects.treasurechest1)

    let bonusList = new LinkedList<ItemBonus>
    var icon = ""
    var name = ""
    var goldCost = 0
    var goldWorth = 0
    var lumberCost = 0
    var charges = 0
    var maxStack = 0
    var tooltipBasic = ""
    var tooltipExtended = ""

    ItemEventListener onPickup = null
    ItemEventListener onDrop = null

    construct(int newId, int origId)
        super(newId, origId)

    construct(int origId)
        super(ITEM_ID_GEN.next(), origId)

    construct()
        super(ITEM_ID_GEN.next(), 'rde1')
        setAbilities("")

    function register()
        tomeMap.put(tomeId, this)
        realMap.put(getNewId(), this)


    /** Creates the item at the given position */
    function create(vec2 pos) returns item
        return createItem(tomeId, pos)

    /** Adds a bonus to this item which will be applied to the wearer */
    function addBonus(Bonus bonus, real amount)
        bonusList.add(new ItemBonus(bonus, amount))

    function generateTooltip(string description)
        setTooltipBasic("Purchase " + name)

        var extended = ""
        for bonus in bonusList
            extended += bonus.toString() + "\n"
        
        if description.length() > 0
            extended += "\n" + description

        setTooltipExtended(extended)

        tomeDef..setName(name)
        ..setDescription(extended)
        
    function applyBonuses(unit u)
        if onPickup != null
            onPickup.emit(u)
        for bonus in bonusList
            bonus.apply(u)

    function removeBonuses(unit u)
        if onDrop != null
            onDrop.emit(u)
        for bonus in bonusList
            bonus.remove(u)

    function onPickup(ItemEventListener listener)
        this.onPickup = listener

    function onDrop(ItemEventListener listener)
        this.onDrop = listener

    override function setName(string data)
        super.setName(data)
        tomeDef.setName(data)
        name = data

    override function setTintingColor3Blue(int data)
        super.setTintingColor3Blue(data)
        tomeDef.setTintingColor3Blue(data)

    override function setTintingColor2Green(int data)
        super.setTintingColor2Green(data)
        tomeDef.setTintingColor2Green(data)

    override function setTintingColor1Red(int data)
        super.setTintingColor1Red(data)
        tomeDef.setTintingColor1Red(data)

    override function setModelUsed(string data)
        super.setModelUsed(data)
        tomeDef.setModelUsed(data)

    override function setGoldCost(int data)
        super.setGoldCost(data)
        tomeDef.setGoldCost(data)
        goldCost = data
        goldWorth = data

    override function setLumberCost(int data)
        super.setLumberCost(data)
        tomeDef.setLumberCost(data)
        lumberCost = data

    override function setNumberofCharges(int data)
        super.setNumberofCharges(data)
        tomeDef.setNumberofCharges(data)
        charges = data

    override function setInterfaceIcon(string data)
        super.setInterfaceIcon(data)
        tomeDef.setInterfaceIcon(data)
        icon = data

    override function setTooltipBasic(string data)
        super.setTooltipBasic(data)
        tomeDef.setTooltipBasic(data)
        tooltipBasic = data

    override function setTooltipExtended(string data)
        super.setTooltipExtended(data)
        tomeDef.setTooltipExtended(data)
        tooltipExtended = data

    override function setMaxStack(int data)
        super.setMaxStack(data)
        maxStack = data


init
    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM) ->
        let itm = EventData.getManipulatedItem()
        timestamps.put(itm, getElapsedGameTime())

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        let itm = EventData.getManipulatedItem()
        let picker = EventData.getManipulatingUnit()
        let id = itm.getTypeId()
        let charges = itm.getCharges()
        let itmPos = itm.getPos()
        let tomeItem = tomeMap.get(id)
        var inventoryFull = picker.isInventoryFull()
        var dontAdd = false
        // print("pickup: " + inventoryFull.toString())

        if tomeItem != null
            // print("tome and not full")
            let newId = tomeItem.getNewId()
            let existingItem = picker.getItemById(newId)
            let newItem = createItem(newId, picker.getPos())
            if newItem.getCharges() > 0
                if existingItem != null
                    existingItem.setCharges(existingItem.getCharges() + charges)
                    newItem.setUserData(-1)
                    newItem.remove()
                    dontAdd = true
                else
                    newItem.setCharges(charges)
                    picker.addItemHandle(newItem)
            else
                picker.addItemHandle(newItem)

            if inventoryFull
                newItem.setUserData(-1)
                newItem.remove()
            
        else if realMap.has(id)
            // print("is real")
            let recipeItem = realMap.get(id)
            recipeItem.applyBonuses(picker)
            if itm.getUserData() == -2
                itm.setUserData(-3)

        var recipeId = id
        if (tomeItem != null and recipeMap.has(tomeItem.getNewId()))
            recipeId = tomeItem.getNewId()

        // print("is part of recipe")
        let recipes = recipeMap.get(recipeId)
        if recipes != null
            var extraId = -1
            if inventoryFull and tomeItem != null
                let recipeItem = tomeMap.get(id)
                extraId = recipeItem.getNewId()
                // print("extraId: " + extraId.toRawCode())
            for recipe in recipes
                if recipe.goldCost == 0 and recipe.checkUnit(picker, extraId)
                    inventoryFull = false
                    break

        if inventoryFull and tomeItem != null
            itm.setUserData(-1)
            itm.remove()
            if not dontAdd
                createItem(id, itmPos)

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        let itm = EventData.getManipulatedItem()
        let dropper = EventData.getManipulatingUnit()
        let id = itm.getTypeId()
        // print("drop")
        if not dropper.isIllusion() and realMap.has(id)
            let recipeItem = realMap.get(id)
            recipeItem.removeBonuses(dropper)
            if itm.getUserData() != -1 and (not timestamps.has(itm) or timestamps.get(itm) + 0.01 < getElapsedGameTime())
                itm.setUserData(-2)
                let charges = itm.getCharges()
                nullTimer() ->
                    // print("remove nulltimer")
                    if itm.getUserData() == -3
                        // print("transferred")
                        itm.setUserData(0)
                    else
                        let pos = itm.getPos()
                        itm.remove()
                        recipeItem.create(pos)
                        ..setCharges(charges)


        
    EventListener.add(EVENT_PLAYER_UNIT_PAWN_ITEM) ->
        let itm = EventData.getSoldItem()
        itm.setUserData(-1)