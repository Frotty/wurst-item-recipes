package RecipeItem
import ItemObjEditing
import ObjectIdGenerator
import ClosureEvents
import HashMap
import ClosureTimers
import ItemRecipe
import Objects
import BonusHandler
import LinkedList

constant tomeMap = new HashMap<int, RecipeItem>
constant realMap = new HashMap<int, RecipeItem>

public class ItemBonus
    Bonus bonus
    real amount

    construct(Bonus bonus, real amount)
        this.bonus = bonus
        this.amount = amount

    function apply(unit u)
        u.addBonus(bonus, amount)

    function remove(unit u)
        u.addBonus(bonus, -amount)
    
    function toString() returns string
        var result = ""
        if amount > 0
            result += COLOR_GOLD.toColorString() + "+"

        if bonus == Bonus.MANAREGEN
            result += amount.toString() + "|r"
        else
            result += amount.round().toString() + "|r"
        result += " " + bonus.toString()
        return result
        

public class RecipeItem extends ItemDefinition
    let tomeId = ITEM_ID_GEN.next()
    let tomeDef = new ItemDefinition(tomeId, 'manh')
        ..setAbilities("")
        ..setModelUsed(Objects.treasurechest1)

    let bonusList = new LinkedList<ItemBonus>
    var icon = ""
    var name = ""
    var goldCost = 0
    var lumberCost = 0
    var charges = 0
    var maxStack = 0
    var tooltipBasic = ""
    var tooltipExtended = ""


    construct(int newId, int origId)
        super(newId, origId)

    construct(int origId)
        super(ITEM_ID_GEN.next(), origId)

    construct()
        super(ITEM_ID_GEN.next(), 'rde1')
        setAbilities("")

    function register()
        tomeMap.put(tomeId, this)
        realMap.put(getNewId(), this)

    /** Creates the item at the given position */
    function create(vec2 pos) returns item
        return createItem(tomeId, pos)

    /** Adds a bonus to this item which will be applied to the wearer */
    function addBonus(Bonus bonus, real amount)
        bonusList.add(new ItemBonus(bonus, amount))

    function generateTooltip(string description)
        setTooltipBasic("Purchase " + name)
        var extended = ""
        for bonus in bonusList
            extended += bonus.toString() + "\n"
        
        extended += "\n" + description
        setTooltipExtended(extended)
        
    function applyBonuses(unit u)
        for bonus in bonusList
            bonus.apply(u)

    function removeBonuses(unit u)
        for bonus in bonusList
            bonus.remove(u)

    override function setName(string data)
        super.setName(data)
        tomeDef.setName(data)
        name = data

    override function setTintingColor3Blue(int data)
        super.setTintingColor3Blue(data)
        tomeDef.setTintingColor3Blue(data)

    override function setTintingColor2Green(int data)
        super.setTintingColor2Green(data)
        tomeDef.setTintingColor2Green(data)

    override function setTintingColor1Red(int data)
        super.setTintingColor1Red(data)
        tomeDef.setTintingColor1Red(data)

    override function setModelUsed(string data)
        super.setModelUsed(data)
        tomeDef.setModelUsed(data)

    override function setGoldCost(int data)
        super.setGoldCost(data)
        tomeDef.setGoldCost(data)
        goldCost = data

    override function setLumberCost(int data)
        super.setLumberCost(data)
        tomeDef.setLumberCost(data)
        lumberCost = data

    override function setNumberofCharges(int data)
        super.setNumberofCharges(data)
        tomeDef.setNumberofCharges(data)
        charges = data

    override function setInterfaceIcon(string data)
        super.setInterfaceIcon(data)
        tomeDef.setInterfaceIcon(data)
        icon = data

    override function setTooltipBasic(string data)
        super.setTooltipBasic(data)
        tomeDef.setTooltipBasic(data)
        tooltipBasic = data


    override function setTooltipExtended(string data)
        super.setTooltipExtended(data)
        tomeDef.setTooltipExtended(data)
        tooltipExtended = data

    override function setMaxStack(int data)
        super.setMaxStack(data)
        maxStack = data


init
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        let itm = EventData.getManipulatedItem()
        let picker = EventData.getManipulatingUnit()
        let id = itm.getTypeId()

        if tomeMap.has(id)
            let recipeItem = tomeMap.get(id)
            itm.remove()
            picker.addItemById(recipeItem.getNewId())
        else if realMap.has(id)
            let recipeItem = realMap.get(id)
            recipeItem.applyBonuses(picker)

        if recipeMap.has(id)
            let recipes = recipeMap.get(id)
            for recipe in recipes
                if recipe.checkUnit(picker)
                    break

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        let itm = EventData.getManipulatedItem()
        let dropper = EventData.getManipulatingUnit()
        let id = itm.getTypeId()
        if realMap.has(id)
            let recipeItem = realMap.get(id)
            recipeItem.removeBonuses(dropper)
            if itm.getUserData() != -1
                nullTimer() ->
                    let pos = itm.getPos()
                    itm.remove()
                    recipeItem.create(pos)

        
    EventListener.add(EVENT_PLAYER_UNIT_PAWN_ITEM) ->
        let itm = EventData.getSoldItem()
        itm.setUserData(-1)